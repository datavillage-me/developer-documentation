openapi: 3.0.3
info:
  title: Code Provider API - OpenAPI 3.0
  contact:
    email: developer@datavillage.me
  version: 0.9.0


paths:
  /resources/data:
    post:
      summary: Upload Data
      description: Upload a data file to the cage
      operationId: upload_data_resources_data_post
      requestBody:
        content:
          multipart/form-data:
            schema:
              title: Body_upload_data_resources_data_post
              required:
                - in_file
              type: object
              properties:
                in_file:
                  title: In File
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                title: HTTPValidationError
                type: object
                properties:
                  detail:
                    title: Detail
                    type: array
                    items:
                      title: ValidationError
                      required:
                        - loc
                        - msg
                        - type
                      type: object
                      properties:
                        loc:
                          title: Location
                          type: array
                          items:
                            anyOf:
                              - type: string
                              - type: integer
                        msg:
                          title: Message
                          type: string
                        type:
                          title: Error Type
                          type: string
  /clients/{clientId}/applications/{applicationId}:
    get:
      tags:
        - clients
      summary: Get application Settings
      operationId: getApplicationSettings
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid ID supplied
        '404':
          description: User / Client / Application not found
        '405':
          description: Validation exception

  /clients/{clientId}/applications/{applicationId}/activeUsers:
    get:
      tags:
        - clients
      summary: Get application active users
      operationId: getApplicationActiveUsers
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveUsers'
        '400':
          description: Invalid ID supplied
        '404':
          description: User / Client / Application not found
        '405':
          description: Validation exception
  /clients/{clientId}/applications/{applicationId}/activeUsers/{userId}/data:
    get:
      tags:
        - clients
      summary: Get user data for application
      operationId: getApplicationUserData
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the active user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blob'
        '400':
          description: Invalid ID supplied
        '404':
          description: User / Client / Application not found

  /clients/{clientId}/applications/{applicationId}/activeUsers/{userId}/inferences:
    put:
      tags:
        - clients
      summary: Save inferences (algorithm results)
      operationId: saveUserInferences
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blob'
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the active user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User / Client / Application not found

  /clients/{clientId}/applications/{applicationId}/activeUsers/{userId}/explains:
    put:
      tags:
        - clients
      summary: Save explains
      operationId: saveUserExplains
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blob'
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the active user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User / Client / Application not found

components:
  schemas:
    Application:
      type: object
      properties:
        id:
          type: string
          format: string
        clientId:
          type: string
          format: string
        name:
          type: string
          format: string
        podFolder:
          type: string
          format: string
        description:
          type: string
          format: string
        appUrl:
          type: string
          format: string
        allowedCallback:
          type: array
          items:
            type: string
        admins:
          type: array
          items:
            type: string
        category:
          type: string
          enum: [media, finance]
        creationDate:
          type: string
          format: date-time
    ActiveUsers:
      type: array
      items:
        type: string
    Blob:
      type: string
